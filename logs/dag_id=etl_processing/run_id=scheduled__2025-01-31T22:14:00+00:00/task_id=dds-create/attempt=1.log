[2025-01-31T22:18:13.902+0000] {local_task_job_runner.py:123} INFO - ::group::Pre task execution logs
[2025-01-31T22:18:13.962+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: etl_processing.dds-create scheduled__2025-01-31T22:14:00+00:00 [queued]>
[2025-01-31T22:18:13.994+0000] {taskinstance.py:2613} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: etl_processing.dds-create scheduled__2025-01-31T22:14:00+00:00 [queued]>
[2025-01-31T22:18:13.994+0000] {taskinstance.py:2866} INFO - Starting attempt 1 of 1
[2025-01-31T22:18:14.062+0000] {taskinstance.py:2889} INFO - Executing <Task(SQLExecuteQueryOperator): dds-create> on 2025-01-31 22:14:00+00:00
[2025-01-31T22:18:14.079+0000] {warnings.py:112} WARNING - /home/***/.local/lib/python3.12/site-packages/***/task/task_runner/standard_task_runner.py:70: DeprecationWarning: This process (pid=3514) is multi-threaded, use of fork() may lead to deadlocks in the child.
  pid = os.fork()

[2025-01-31T22:18:14.083+0000] {standard_task_runner.py:72} INFO - Started process 3518 to run task
[2025-01-31T22:18:14.087+0000] {standard_task_runner.py:104} INFO - Running: ['***', 'tasks', 'run', 'etl_processing', 'dds-create', 'scheduled__2025-01-31T22:14:00+00:00', '--job-id', '678', '--raw', '--subdir', 'DAGS_FOLDER/DAG_etl.py', '--cfg-path', '/tmp/tmpjtxo2zw8']
[2025-01-31T22:18:14.094+0000] {standard_task_runner.py:105} INFO - Job 678: Subtask dds-create
[2025-01-31T22:18:14.261+0000] {task_command.py:467} INFO - Running <TaskInstance: etl_processing.dds-create scheduled__2025-01-31T22:14:00+00:00 [running]> on host a664bcf281bf
[2025-01-31T22:18:14.998+0000] {taskinstance.py:3132} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='***' AIRFLOW_CTX_DAG_ID='etl_processing' AIRFLOW_CTX_TASK_ID='dds-create' AIRFLOW_CTX_EXECUTION_DATE='2025-01-31T22:14:00+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='scheduled__2025-01-31T22:14:00+00:00'
[2025-01-31T22:18:15.000+0000] {taskinstance.py:731} INFO - ::endgroup::
[2025-01-31T22:18:15.046+0000] {sql.py:278} INFO - Executing: 

    create table if not exists dds.branch(
        id serial primary key,
        branch varchar(3) not null
    );

    create table if not exists dds.city(
        id serial primary key,
        city varchar(150) not null
    );

    create table if not exists dds.customer_type(
        id serial primary key,
        customer_type varchar(10) not null
    );

    create table if not exists dds.gender(
        id serial primary key,
        gender varchar(10) not null
    );

    create table if not exists dds.product_line(
        id serial primary key,
        product_line varchar(150) not null
    );

    create table if not exists dds.payment(
        id serial primary key,
        payment varchar(150) not null
    );

    create table if not exists dds.date as
        with array_date as (
            select dd::date as dt
            from generate_series('2000-01-01'::timestamp,'2050-01-01'::timestamp,'1 day'::interval) dd
        )
        select
            dt as date,
            date_part('week', dt)::int as week_of_year,
            date_trunc('week', dt)::date as week_start,
            date_part('isodow', dt)::int as day_of_week,
            date_part('month', dt)::int as month_number,
            to_char(dt::timestamp, 'Month') as month_name,
            extract(quarter from dt) as quarter,
            date_part('isoyear', dt)::int as year
        from array_date;
        alter table dds.date drop constraint if exists date_pkey cascade;
        alter table dds.date add constraint date_pkey primary key (date);

    create table if not exists dds.time as
        with cte1 as (
            select 
                tt::time as t
            from generate_series(current_date, current_date + '1 day - 1 second'::interval,'1 minute') tt),
        cte2 as (
            select
                t as time
            from cte1 order by t
        )
        select time,
                case
                    when (time >= '00:00:00'::time AND time < '06:00:00'::time) then 'night'
                    when (time >= '06:00:00'::time AND time < '11:00:00'::time) then 'morning'
                    when (time >= '11:00:00'::time AND time < '17:00:00'::time) then 'noon'
                    when (time >= '17:00:00'::time AND time < '22:00:00'::time) then 'evening'
                    when (time >= '22:00:00'::time AND time < '24:00:00'::time) then 'night'
                end as date_part 
        from cte2;
        alter table dds.time drop constraint if exists time_pkey cascade;
        alter table dds.time add constraint time_pkey primary key (time);

    create table if not exists dds.fact_sales_branch(
        invoice_id varchar(15) PRIMARY KEY,
        branch int not null references dds.branch(id),
        city int not null references dds.city(id),
        customer_type int not null references dds.customer_type(id),
        gender int not null references dds.gender(id),
        product_line int not null references dds.product_line(id),
        unit_price double precision,
        quantity double precision,
        "tax_5%" double precision,
        total double precision,
        date date not null,
        time time not null,
        payment int not null references dds.payment(id),
        cogs double precision,
        gross_margin_percentage double precision,
        gross_income double precision,
        rating double precision
    );
    alter table dds.fact_sales_branch add constraint fact_sales_date_fkey foreign key (date) references dds.date(date);
    alter table dds.fact_sales_branch add constraint fact_sales_time_fkey foreign key (time) references dds.time(time);   
[2025-01-31T22:18:15.076+0000] {base.py:84} INFO - Retrieving connection 'DB_connect'
[2025-01-31T22:18:15.097+0000] {base.py:84} INFO - Retrieving connection 'DB_connect'
[2025-01-31T22:18:15.111+0000] {sql.py:544} INFO - Running statement: 

    create table if not exists dds.branch(
        id serial primary key,
        branch varchar(3) not null
    );

    create table if not exists dds.city(
        id serial primary key,
        city varchar(150) not null
    );

    create table if not exists dds.customer_type(
        id serial primary key,
        customer_type varchar(10) not null
    );

    create table if not exists dds.gender(
        id serial primary key,
        gender varchar(10) not null
    );

    create table if not exists dds.product_line(
        id serial primary key,
        product_line varchar(150) not null
    );

    create table if not exists dds.payment(
        id serial primary key,
        payment varchar(150) not null
    );

    create table if not exists dds.date as
        with array_date as (
            select dd::date as dt
            from generate_series('2000-01-01'::timestamp,'2050-01-01'::timestamp,'1 day'::interval) dd
        )
        select
            dt as date,
            date_part('week', dt)::int as week_of_year,
            date_trunc('week', dt)::date as week_start,
            date_part('isodow', dt)::int as day_of_week,
            date_part('month', dt)::int as month_number,
            to_char(dt::timestamp, 'Month') as month_name,
            extract(quarter from dt) as quarter,
            date_part('isoyear', dt)::int as year
        from array_date;
        alter table dds.date drop constraint if exists date_pkey cascade;
        alter table dds.date add constraint date_pkey primary key (date);

    create table if not exists dds.time as
        with cte1 as (
            select 
                tt::time as t
            from generate_series(current_date, current_date + '1 day - 1 second'::interval,'1 minute') tt),
        cte2 as (
            select
                t as time
            from cte1 order by t
        )
        select time,
                case
                    when (time >= '00:00:00'::time AND time < '06:00:00'::time) then 'night'
                    when (time >= '06:00:00'::time AND time < '11:00:00'::time) then 'morning'
                    when (time >= '11:00:00'::time AND time < '17:00:00'::time) then 'noon'
                    when (time >= '17:00:00'::time AND time < '22:00:00'::time) then 'evening'
                    when (time >= '22:00:00'::time AND time < '24:00:00'::time) then 'night'
                end as date_part 
        from cte2;
        alter table dds.time drop constraint if exists time_pkey cascade;
        alter table dds.time add constraint time_pkey primary key (time);

    create table if not exists dds.fact_sales_branch(
        invoice_id varchar(15) PRIMARY KEY,
        branch int not null references dds.branch(id),
        city int not null references dds.city(id),
        customer_type int not null references dds.customer_type(id),
        gender int not null references dds.gender(id),
        product_line int not null references dds.product_line(id),
        unit_price double precision,
        quantity double precision,
        "tax_5%" double precision,
        total double precision,
        date date not null,
        time time not null,
        payment int not null references dds.payment(id),
        cogs double precision,
        gross_margin_percentage double precision,
        gross_income double precision,
        rating double precision
    );
    alter table dds.fact_sales_branch add constraint fact_sales_date_fkey foreign key (date) references dds.date(date);
    alter table dds.fact_sales_branch add constraint fact_sales_time_fkey foreign key (time) references dds.time(time);   , parameters: None
[2025-01-31T22:18:15.256+0000] {taskinstance.py:340} INFO - ::group::Post task execution logs
[2025-01-31T22:18:15.257+0000] {taskinstance.py:352} INFO - Marking task as SUCCESS. dag_id=etl_processing, task_id=dds-create, run_id=scheduled__2025-01-31T22:14:00+00:00, execution_date=20250131T221400, start_date=20250131T221813, end_date=20250131T221815
[2025-01-31T22:18:15.362+0000] {local_task_job_runner.py:266} INFO - Task exited with return code 0
[2025-01-31T22:18:15.843+0000] {taskinstance.py:3895} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2025-01-31T22:18:15.892+0000] {local_task_job_runner.py:245} INFO - ::endgroup::
